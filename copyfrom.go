// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForInsertReport implements pgx.CopyFromSource.
type iteratorForInsertReport struct {
	rows                 []InsertReportParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertReport) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertReport) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].RptType,
		r.rows[0].ReportedTime,
		r.rows[0].CreatedAt,
		r.rows[0].VarCol,
		r.rows[0].DistFromLocation,
		r.rows[0].HeadingFromLocation,
		r.rows[0].County,
		r.rows[0].State,
		r.rows[0].Latitude,
		r.rows[0].Longitude,
		r.rows[0].EventLocation,
		r.rows[0].Comments,
		r.rows[0].NwsOffice,
		r.rows[0].Location,
	}, nil
}

func (r iteratorForInsertReport) Err() error {
	return nil
}

func (q *Queries) InsertReport(ctx context.Context, arg []InsertReportParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"reports"}, []string{"rpt_type", "reported_time", "created_at", "var_col", "dist_from_location", "heading_from_location", "county", "state", "latitude", "longitude", "event_location", "comments", "nws_office", "location"}, &iteratorForInsertReport{rows: arg})
}
