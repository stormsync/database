// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllReports = `-- name: GetAllReports :many
select rpt_type,
       reported_time,
       created_at,
       var_col,
       dist_from_location,
       heading_from_location,
       county,
       state,
       latitude,
       longitude,
       event_location,
       comments,
       nws_office,
       location
from reports
order by rpt_type, reported_time
offset $1 limit $2
`

type GetAllReportsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetAllReports(ctx context.Context, arg GetAllReportsParams) ([]Report, error) {
	rows, err := q.db.Query(ctx, getAllReports, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.RptType,
			&i.ReportedTime,
			&i.CreatedAt,
			&i.VarCol,
			&i.DistFromLocation,
			&i.HeadingFromLocation,
			&i.County,
			&i.State,
			&i.Latitude,
			&i.Longitude,
			&i.EventLocation,
			&i.Comments,
			&i.NwsOffice,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReport = `-- name: GetReport :one
select rpt_type,
       reported_time,
       created_at,
       var_col,
       dist_from_location,
       heading_from_location,
       county,
       state,
       latitude,
       longitude,
       event_location,
       comments,
       nws_office,
       location
from reports
where rpt_type = $1
  and reported_time = $2
  and dist_from_location = $3
  and heading_from_location = $4
  and location = $5
  and county = $6
  and state = $7
order by rpt_type, reported_time
offset $8 limit $9
`

type GetReportParams struct {
	RptType             ReportType
	ReportedTime        pgtype.Timestamptz
	DistFromLocation    int32
	HeadingFromLocation string
	Location            string
	County              string
	State               pgtype.Text
	Offset              int32
	Limit               int32
}

func (q *Queries) GetReport(ctx context.Context, arg GetReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, getReport,
		arg.RptType,
		arg.ReportedTime,
		arg.DistFromLocation,
		arg.HeadingFromLocation,
		arg.Location,
		arg.County,
		arg.State,
		arg.Offset,
		arg.Limit,
	)
	var i Report
	err := row.Scan(
		&i.RptType,
		&i.ReportedTime,
		&i.CreatedAt,
		&i.VarCol,
		&i.DistFromLocation,
		&i.HeadingFromLocation,
		&i.County,
		&i.State,
		&i.Latitude,
		&i.Longitude,
		&i.EventLocation,
		&i.Comments,
		&i.NwsOffice,
		&i.Location,
	)
	return i, err
}

type InsertReportParams struct {
	RptType             ReportType
	ReportedTime        pgtype.Timestamptz
	CreatedAt           pgtype.Timestamptz
	VarCol              pgtype.Int4
	DistFromLocation    int32
	HeadingFromLocation string
	County              string
	State               pgtype.Text
	Latitude            pgtype.Text
	Longitude           pgtype.Text
	EventLocation       interface{}
	Comments            pgtype.Text
	NwsOffice           pgtype.Text
	Location            string
}
