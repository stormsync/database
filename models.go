// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ReportType string

const (
	ReportTypeHail    ReportType = "hail"
	ReportTypeWind    ReportType = "wind"
	ReportTypeTornado ReportType = "tornado"
)

func (e *ReportType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportType(s)
	case string:
		*e = ReportType(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportType: %T", src)
	}
	return nil
}

type NullReportType struct {
	ReportType ReportType
	Valid      bool // Valid is true if ReportType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportType) Scan(value interface{}) error {
	if value == nil {
		ns.ReportType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportType), nil
}

type NwsOffice struct {
	ID    string
	City  pgtype.Text
	State pgtype.Text
}

type Report struct {
	RptType             ReportType
	ReportedTime        pgtype.Timestamptz
	CreatedAt           pgtype.Timestamptz
	VarCol              pgtype.Int4
	DistFromLocation    int32
	HeadingFromLocation string
	County              string
	State               pgtype.Text
	Latitude            pgtype.Text
	Longitude           pgtype.Text
	EventLocation       interface{}
	Comments            pgtype.Text
	NwsOffice           pgtype.Text
	Location            string
}

type SchemaMigration struct {
	Version int64
	Dirty   bool
}

type SpatialRefSy struct {
	Srid      int32
	AuthName  pgtype.Text
	AuthSrid  pgtype.Int4
	Srtext    pgtype.Text
	Proj4text pgtype.Text
}

type XrefReportTypeVarCol struct {
	RptType       ReportType
	ColumnHeading string
}
